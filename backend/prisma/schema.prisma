generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  profile           Profile?
  clubs             Club[]
  memberships       ClubMember[]
  discussionPosts   DiscussionPost[]
  discussionReplies DiscussionReply[]
}

model Profile {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  fullName       String
  profilePicture String?
  bio            String?
  joinDate       DateTime @default(now())
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Club {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  creatorId       Int
  creator         User             @relation(fields: [creatorId], references: [id])
  currentBookId   String?
  currentBookData Json?
  readingGoal     String?
  goalDeadline    DateTime?
  members         ClubMember[]
  discussions     DiscussionPost[]
}

model ClubMember {
  id       Int      @id @default(autoincrement())
  role     Role
  clubId   Int
  userId   Int
  progress Int      @default(0)
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clubId, userId])
}

enum Role {
  HOST
  MODERATOR
  MEMBER
}

model DiscussionPost {
  id           Int                   @id @default(autoincrement())
  datePosted   DateTime              @default(now())
  dateEdited   DateTime?
  hasMedia     Boolean               @default(false)
  clubId       Int
  userId       Int
  contentId    Int                   @unique
  title        String
  chapterIndex Int?
  tags         Json?
  pinned       Boolean               @default(false)
  locked       Boolean               @default(false)
  club         Club                  @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      DiscussionPostContent @relation(name: "DiscussionToContent", fields: [contentId], references: [id], onDelete: Cascade)
  media        DiscussionPostMedia[]
  replies      DiscussionReply[]
}

model DiscussionPostContent {
  id         Int             @id @default(autoincrement())
  message    String
  discussion DiscussionPost? @relation(name: "DiscussionToContent")
}

model DiscussionPostMedia {
  id           Int            @id @default(autoincrement())
  file         String
  fileType     String
  discussionId Int
  discussion   DiscussionPost @relation(fields: [discussionId], references: [id], onDelete: Cascade)
}

model DiscussionReply {
  id           Int               @id @default(autoincrement())
  discussionId Int
  parentId     Int?
  userId       Int
  body         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now())
  discussion   DiscussionPost    @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       DiscussionReply?  @relation("ReplyToParent", fields: [parentId], references: [id])
  children     DiscussionReply[] @relation("ReplyToParent")
}
