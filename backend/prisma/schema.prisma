generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id			Int @id @default(autoincrement())
  name		String
  email		String @unique
  password	String
  createdAt DateTime @default(now())
  profile	Profile?
  clubs		Club[] // Clubs created by user
  memberships ClubMember[] // Clubs user is a member of
}

model Profile {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  fullName       String
  profilePicture String?
  bio            String?
  joinDate       DateTime @default(now())
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Club {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
  currentBookId String?
  currentBookData Json? // Store book details as JSON
  readingGoal String? // Reading goal text (e.g., "Read chapters 1-3")
  goalDeadline DateTime? // Deadline for the reading goal
  members     ClubMember[] // Members of the club
  discussions DiscussionPost[]
  threadReplies ThreadReply[]
}

model ClubMember {
  id       Int      @id @default(autoincrement())
  role     Role     //HOST, MODERATOR, or MEMBER
  clubId   Int
  userId   Int
  progress Int      @default(0) // Progress from 0-100
  joinedAt DateTime @default(now())
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussionPosts       DiscussionPost[]
  threadReplies         ThreadReply[]
  @@unique([clubId, userId])
}

enum Role {
  HOST
  MODERATOR
  MEMBER
}

model DiscussionPost {
	id		Int @id @default(autoincrement())
	datePosted	DateTime @default(now())
	dateEdited	DateTime?
	hasMedia	Boolean
        chapter         Int?
	bookClubID	Int
	memberID	Int
	bookClub	Club @relation(fields: [bookClubID], references: [id])
	member          ClubMember @relation(fields: [memberID], references: [id])
	content		DiscussionPostContent
	media		DiscussionPostMedia[]
        replies         ThreadReply[]
        tags            Tag[]
}

model Tag {
        id              Int @id @default(autoincrement())
        name            String
}

model DiscussionPostContent {
	id              Int @id @default(autoincrement())
	message 	String
	threadID	Int
	discussion      DiscussionPost @relation(fields: [threadID], references: [id])
}

model DiscussionPostMedia {
	id		Int @id @default(autoincrement())
	file 		String
	fileType	String
	threadID	Int
	discussion	DiscussionPost @relation(fields: [threadID], references: [id])
}

model ThreadReply {
	id		Int @id @default(autoincrement())
	parentReplyID 	Int?
	threadID	Int
	datePosted	DateTime @default(now())
	dateEdited	DateTime?
	hasMedia	Boolean
	bookClubID      Int
	memberID	Int
	bookClub	Club @relation(fields: [bookClubID], references: [id])
	member          ClubMember @relation(fields: [memberID], references: [id])
	parent		ThreadReply? @relation(fields: [parentReplyID], references: [id])
	replies		ThreadReply[] @relation("MessageReplies")
	content		ThreadReplyContent
	media		ThreadReplyMedia[]
}

model ThreadReplyContent {
	id		Int @id @default(autoincrement())
	message         String
	threadID	Int
	replyID		Int
	thread		DiscussionPost @relation(fields: [threadID], references: [id])
	reply		ThreadReply @relation(fields: [replyID], references: [id])
}

model ThreadReplyMedia {
	id		Int @id @default(autoincrement())
	file 		String
	fileType	String
	threadID	Int
	replyID		Int
	thread		DiscussionPost @relation(fields: [threadID], references: [id])
	reply		ThreadReply @relation(fields: [replyID], references: [id])
}